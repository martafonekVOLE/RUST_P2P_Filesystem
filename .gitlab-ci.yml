# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/pipeline/#customization
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence
# 
# --- Original SAST template by gitlab ---
# 
# stages:
#   - test

# sast:
#   stage: test
#   include:
#     - template: Security/SAST.gitlab-ci.yml
# ------------------------------------------
stages:
  - lint
  - build
  - test

# Lint stage
lint:
  stage: lint
  image: rust:latest
  # Caching Rust build artifacts can speed up subsequent runs
  cache:
    key: "${CI_COMMIT_REF_SLUG}"
    paths:
      - target
      - Cargo.lock
  script:
    # Install clippy if it's not available
    - rustup component add clippy
    - rustup component add rustfmt
    # Run clippy in a strict mode: fails if there are any warnings
    - cargo clippy -- -D warnings
    
    # Also runs cargo fmt -- --check to fail if code formatting is not correct.
    # This ensures all code remains consistently formatted.
    - cargo fmt -- --check

# Build stage
build:
  stage: build
  image: rust:latest
  cache:
    key: "${CI_COMMIT_REF_SLUG}"
    paths:
      - target
      - Cargo.lock
  script:
    - cargo build --release

# Test stage
test:
  stage: test
  image: rust:latest
  cache:
    key: "${CI_COMMIT_REF_SLUG}"
    paths:
      - target
      - Cargo.lock
  script:
    - cargo test

